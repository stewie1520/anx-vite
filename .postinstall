const fs = require('fs')
const path = require('path')
const { spawn } = require('child_process')

const removeDir = _path => {
  if (!fs.existsSync(_path)) {
    return
  }

  const files = fs.readdirSync(_path)

  if (files.length > 0) {
    files.forEach(filename => {
      const pathToFilename = path.join(_path, filename)
      if (fs.statSync(pathToFilename).isDirectory()) {
        removeDir(pathToFilename)
      } else {
        fs.unlinkSync(pathToFilename)
      }
    })
  }

  fs.rmdirSync(_path)
}

const app = appName => /^win/.test(process.platform) ? `${appName}.cmd` : appName

const scripts = [
  [app('npx'), ['husky', 'install']],
  [app('npx'), ['husky', 'add', '.husky/pre-commit', 'npx lint-staged']],
  [app('npx'), ['husky', 'add', '.husky/commit-msg', 'npx --no-install commitlint --edit "$1"']]
]

const runCMD = (cmd, options) => new Promise((resolve, reject) => {
  const output = [`Execute: ${cmd} ${options.join(' ')}`]
  const execCMD = spawn(cmd, options)

  execCMD.stdout.on('data', data => output.push(data))
  execCMD.stderr.on('data', data => output.push(data))

  execCMD.on('error', error => {
    return reject(error)
  })

  execCMD.on('close', code => {
    if (code) {
      return reject(new Error(output.join('\n').replace(/[\n]{2,}/gm, '\n')))
    }
    return resolve(output.join('\n').replace(/[\n]{2,}/gm, '\n'))
  })
})

const huskyDir = path.join(__dirname, '.husky')
removeDir(huskyDir)

const run = async () => {
  for (const script of scripts) {
    try {
      const message = await runCMD(...script)
      console.log(message)
    } catch (err) {
      console.log(err)
    }
  }
}

run()